name: CI + CD

on:
  push:
    branches: [main]
  pull_request: 
    branches: [main]
  workflow_dispatch:
    inputs:
      loglevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'


jobs:
  Build:
    runs-on: ubuntu-latest
    # outputs:
    #   Version: ${{ steps.gitversion.outputs.buGetVersionV2 }}
    #   CommitsSinceVersionSource: ${{ steps.gitVersion.outputs.CommitsSinceVersionSource }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 #fetch-depth is needed for GitVersion

      - name: Setup NodeJS 14
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install yarn
        run: npm install -g yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Cache yarn dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
          key: vivid-cache-yarn-${{ hashFiles('**/package.json') }}

      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: Build components
        run: yarn compile

      - name: Cache build
        uses: actions/cache@v2
        id: build-cache
        with:
          path: |
            common
            components
          key: vivid-cache-build-${{ github.event.pull_request.head.sha }}
     
      - name: Upload coverage as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'coverage'
          path: 'coverage/coverage.txt'
        

      # - name: Determine Version
      #   uses: gittools/actions/gitversion/execute@v0.9.7
      #   with:
      #     versionSpec: '5.x'

      # - name: Determine Version
      #   uses: gittools/actions/gitversion/execute@v0.9.7
      #   id: gitversion #step id used as reference for output values

      # - name: Display GitVersion outputs
      #   run: |
      #     echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
      #     echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
      #     echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"

  Pr:
    name: Dynamic branch on PR
    if: github.event.number != null # this only runs when in a PR
    runs-on: ubuntu-latest
    needs: [Build]
    environment:
      name: Review
      url: "http://review-${{ github.event.number }}.lab.github.com"
    steps:
      - run: echo "Deploy code to PR#${{ github.event.number }}"
      - name: Log into AWS
        run: echo 'Successfully logged in...'

      - name: Create new PR environment and deploy code
        run: echo 'start of dynamic workflow'

      - name: Get Current Pull Request
        uses: 8BitJonny/gh-get-current-pr@1.0.1
        id: pr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          filterOutClosed: true

      - name: File Changes
        id: file_changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          # prNumber: ${{ github.event.number }}
          prNumber: ${{ github.event.pull_request.number }}
          pushBefore: ''
          pushAfter: ''

      - name: Output File Changes
        run: echo '$'

      - name: Run one "build"
        if: contains(steps.file_changes.outputs.files, '"one/')
        run: echo Hello, one!
  
  
  # publish-npm:
  #   name: Publish to npm
  #   if: github.ref == 'refs/heads/main'
  #   needs: [Build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12
  #         registry-url: https://registry.npmjs.org/
  #     - run: npm ci
  #     - run: npm publish --access=public ##NOTE: The NPM API token is stored as an org level secret
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # publish-gpr:
  #   name: Publish to github package manager
  #   if: github.ref == 'refs/heads/main'
  #   needs: [Build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12
  #         registry-url: https://npm.pkg.github.com/
  #     - run: npm ci
  #     - run: npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  DeployDev:
    name: Deploy to Dev
    # if: github.event_name == 'pull_request'
    needs: [Build]
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    runs-on: ubuntu-latest
    environment:
      name: Development
      url: 'http://dev.myapp.com'
    steps:
      - name: "Deploy code to dev"
        run: echo 'I am deploying'

      - name: Create new Dev environment and deploy code
        run: echo "deployed to dev environment"

  QA:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} # only run on the main trunk
    needs: [DeployDev]
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    environment:
      name: QA
      url: 'http://qa.myapp.com'
    steps:
    - run: echo "Deploy code to QA"
    - name: Log into AWS
      run: echo "Logged in to AWS"
    - name: Create new QA environment and deploy code
      run: echo "Deployed to QA"

  DeployStaging:
    name: Deploy to Staging
    if: github.event.ref == 'refs/heads/main'
    needs: [QA]
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    runs-on: ubuntu-latest
    environment:
      name: Staging
      url: 'http://staging.myapp.com'
    steps:
      - name: Deploy
        run: echo 'I am deploying'
      # - name: Display GitVersion outputs
      #   run: |
      #     echo "Version: ${{ needs.Build.outputs.Version  }}"
      #     echo "CommitsSinceVersionSource: ${{ needs.Build.outputs.CommitsSinceVersionSource  }}"
      
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   if: needs.Build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit change
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} #this token is provided by Actions, you do not need to create
      #   with:
      #     tag_name: ${{ needs.Build.outputs.Version }}
      #     release_name: Release ${{ needs.Build.outputs.Version  }}


  DeployProduction:
    name: Deploy to Production
    needs: [DeployStaging]
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: 'http://www.myapp.com'
    steps:
      - name: Deploy
        run: echo 'I am deploying'


