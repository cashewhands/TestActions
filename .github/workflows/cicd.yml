name: CI + CD

on:
  push:
    branches: [main]
  pull_request: 
    branches: [main]
  issue_comment:
  workflow_dispatch:
    inputs:
      loglevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

#added when doing Pr-Commented, issue_comment
permissions:
  issues: write
  contents: read

jobs:
  call-lint-and-build:
    uses: ./.github/workflow/_lint.yml@main

  Unit-Test:
    name: Unit Test
    needs: call-lint-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: use cache 
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm run test

  Integration-Test:
    name: Integration Test
    needs: call-lint-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: use cache 
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run integration tests
        run: echo "Integration testing"

  Codecov:
    needs: [Unit-Test,Integration-Test]
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2 

      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/lcov-report/
          fail_ci_if_error: false
          verbose: true

  Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    # outputs:
    #   Version: ${{ steps.gitversion.outputs.buGetVersionV2 }}
    #   CommitsSinceVersionSource: ${{ steps.gitVersion.outputs.CommitsSinceVersionSource }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 #fetch-depth is needed for GitVersion

      - name: Setup NodeJS 14
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Cache yarn dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
          key: vivid-cache-yarn-${{ hashFiles('**/package.json') }}

      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: Build components
        run: yarn compile

      - name: Cache build
        uses: actions/cache@v2
        id: build-cache
        with:
          path: |
            common
            components
          key: vivid-cache-build-${{ github.event.pull_request.head.sha }}
     
      - name: Upload coverage as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'coverage'
          path: 'coverage/coverage.txt'
        

      # - name: Determine Version
      #   uses: gittools/actions/gitversion/execute@v0.9.7
      #   with:
      #     versionSpec: '5.x'

      # - name: Determine Version
      #   uses: gittools/actions/gitversion/execute@v0.9.7
      #   id: gitversion #step id used as reference for output values

      # - name: Display GitVersion outputs
      #   run: |
      #     echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
      #     echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
      #     echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"

  Pr:
    name: Dynamic branch on PR
    if: github.event.number != null # this only runs when in a PR
    runs-on: ubuntu-latest
    outputs:
      all: ${{ steps.changes.outputs.all}}
      js: ${{ steps.changes.outputs.js }}
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH: ${{ github.head_ref }}
      STAGE: pr${{ github.event.number }}
    needs: [Build]
    environment:
      name: Review
      url: "http://review-${{ github.event.number }}.lab.github.com"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
        
      - run: echo "Deploy code to PR#${{ github.event.number }}"
      - name: Log into AWS
        run: echo 'Successfully logged in...'

      - name: Create new PR environment and deploy code
        run: echo 'start of dynamic workflow'

      - name: Get Current Pull Request
        uses: 8BitJonny/gh-get-current-pr@1.0.1
        id: pr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          filterOutClosed: true
      
      - name: Show GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Get Branch
        id: branch
        run: echo "git_branch=${GITHUB_REF#refs/heads/}"

      - name: Check Branch
        run: echo "${{ steps.branch.outputs.git_branch }}"

      - name: Get Hash
        id: hash
        run: echo "::set-output name=git_sha::$(git rev-parse --short $GITHUB_SHA)"

      - name: Check Hash
        run: echo "${{ steps.hash.outputs.git_sha }}"

      - name: Show Github SHA
        run: echo ${{ github.event.pull_request.head.sha }}

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"


      - name: Retrieve the branch and sha
        run: |
          echo "Branch: ${{ steps.vars.outputs.branch }}"
          echo "Sha: ${{ steps.vars.outputs.sha_short }}"

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: My Step
        run: echo ${SHORT_SHA}

      - uses: actions/github-script@0.6.0
        id: prTU
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const result = await github.repos.listPullRequestsAssociatedWithCommit({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              commit_sha: context.payload.pull_request.head.sha
            })
            return result.data[0].number;

      - name: File Changes
        id: file_changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          githubToken: ${{secrets.GITHUB_TOKEN}}
          # prNumber: ${{ github.event.number }}
          # prNumber: ${{ github.event.pull_request.number }}
          prNumber: ${{ steps.prTU.outputs.results }}
          pushBefore: ${{ github.event.before }}
          pushAfter: ${{ github.event.after }}

      - name: Output File Changes
        run: |
          echo '${{ steps.file_changes.outputs.files}}'
          echo '${{ steps.file_changes.outputs.files_modified}}'
          echo '${{ steps.file_changes.outputs.files_added }}'
          echo '${{ steps.file_changes.outputs.files_removed }}'

      - name: Run one "build"
        if: contains(steps.file_changes.outputs.files, '"one/')
        run: echo Hello, one!
      
      - name: Output All env
        run: |
          echo 'BRANCH: ${{ env.BRANCH }}'
          echo 'PR_NUMBER: ${{ env.PR_NUMBER }}'
          echo '${{ env.STAGE }}'

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v14.6

      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done

      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          echo "::set-output name=all::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)"
          echo "::set-output name=js::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep .js$ | xargs)"

  Lint-Pr:
    name: Linting branch on PR
    # if: github.event.number != null
    runs-on: ubuntu-latest
    # require the second job to have ran
    needs: [Pr]
    # only run there are changed files
    if: github.event.number != null && ${{needs.Pr.outputs.js}}
    steps:
      - name: echo changed files
        run: echo ${{ needs.Pr.outputs.js }}

  Pr-Commented:
    name: PR comment
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, '/run tests') }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo content
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Display branch name
        run: |
          echo "branch=$(echo "${{ github.event.comment.body }}" | cut -d " " -f 3)" >> $GITHUB_ENV

  # publish-npm:
  #   name: Publish to npm
  #   if: github.ref == 'refs/heads/main'
  #   needs: [Build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12
  #         registry-url: https://registry.npmjs.org/
  #     - run: npm ci
  #     - run: npm publish --access=public ##NOTE: The NPM API token is stored as an org level secret
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # publish-gpr:
  #   name: Publish to github package manager
  #   if: github.ref == 'refs/heads/main'
  #   needs: [Build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12
  #         registry-url: https://npm.pkg.github.com/
  #     - run: npm ci
  #     - run: npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  DeployDev:
    name: Deploy to Dev
    # if: github.event_name == 'pull_request'
    needs: [Build]
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    runs-on: ubuntu-latest
    environment:
      name: Development
      url: 'http://dev.myapp.com'
    steps:
      - name: "Deploy code to dev"
        run: echo 'I am deploying'

      - name: Create new Dev environment and deploy code
        run: echo "deployed to dev environment"

  QA:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} # only run on the main trunk
    needs: [DeployDev]
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    environment:
      name: QA
      url: 'http://qa.myapp.com'
    steps:
    - run: echo "Deploy code to QA"
    - name: Log into AWS
      run: echo "Logged in to AWS"
    - name: Create new QA environment and deploy code
      run: echo "Deployed to QA"

  DeployStaging:
    name: Deploy to Staging
    if: github.event.ref == 'refs/heads/main'
    needs: [QA]
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    runs-on: ubuntu-latest
    environment:
      name: Staging
      url: 'http://staging.myapp.com'
    steps:
      - name: Deploy
        run: echo 'I am deploying'
      # - name: Display GitVersion outputs
      #   run: |
      #     echo "Version: ${{ needs.Build.outputs.Version  }}"
      #     echo "CommitsSinceVersionSource: ${{ needs.Build.outputs.CommitsSinceVersionSource  }}"
      
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   if: needs.Build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit change
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} #this token is provided by Actions, you do not need to create
      #   with:
      #     tag_name: ${{ needs.Build.outputs.Version }}
      #     release_name: Release ${{ needs.Build.outputs.Version  }}


  DeployProduction:
    name: Deploy to Production
    needs: [DeployStaging]
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: 'http://www.myapp.com'
    steps:
      - name: Deploy
        run: echo 'I am deploying'


